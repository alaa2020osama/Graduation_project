# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5gEx3o4d45tQy90hs_zAnT_Wz5raEY1
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile
from google.colab import drive


zip_ref = zipfile.ZipFile("/content/drive/My Drive/driving_dataset.zip", 'r')
zip_ref.extractall("/content/nividia-org")
zip_ref.close()

!pip uninstall tensorflow-gpu==1.1.0
!pip install tensorflow-gpu==1.1.0

import os
import tensorflow as tf
from tensorflow.core.protobuf import saver_pb2
import numpy
import scipy
import matplotlib.pyplot
from PIL import Image
from matplotlib import pyplot as plt

##################################################GPU






#############################################################################################
import scipy.misc
import random


xs = []
ys = []

#points to the end of the last batch
train_batch_pointer = 0
val_batch_pointer = 0

#read data.txt
with open("/content/nividia-org/driving_dataset/data.txt") as f:
    for line in f:
        # Saving the location of each image in xs
        xs.append("/content/nividia-org/driving_dataset/" + line.split()[0])
        #the paper by Nvidia uses the inverse of the turning radius,
        #but steering wheel angle is proportional to the inverse of turning radius
        #so the steering wheel angle in radians is used as the output
        
        # Converting steering angle which we need to predict from radians
        # to degrees for fast computation 
        ys.append(float(line.split()[1]) * scipy.pi / 180)

#get number of images
num_images = len(xs)

# To change the train and test ratio do it here
# Here Train -> 80% and Test -> 20%
train_xs = xs[:int(len(xs) * 0.8)]
train_ys = ys[:int(len(xs) * 0.8)]

val_xs = xs[-int(len(xs) * 0.2):]
val_ys = ys[-int(len(xs) * 0.2):]

num_train_images = len(train_xs)
num_val_images = len(val_xs)

def LoadTrainBatch(batch_size):
    # Train batch pointer allows we use subsequent ahead images for train 
    # Rather than using random images from train data as we train the model 
    # on batches of data rather thatn whole data at each epoch
    global train_batch_pointer
    x_out = []
    y_out = []
    for i in range(0, batch_size):
        #Resizing and Converting image in ideal form to train
        x_out.append(numpy.array(Image.fromarray(matplotlib.pyplot.imread(train_xs[(train_batch_pointer + i) % num_train_images])[-150:]).resize([ 200,66]))/ 255.0)
        y_out.append([train_ys[(train_batch_pointer + i) % num_train_images]])
    train_batch_pointer += batch_size
    return x_out, y_out

def LoadValBatch(batch_size):
    global val_batch_pointer
    x_out = []
    y_out = []
    for i in range(0, batch_size):
        x_out.append(numpy.array(Image.fromarray(matplotlib.pyplot.imread(val_xs[(val_batch_pointer + i) % num_val_images])[-150:]).resize([200, 66]))/ 255.0)
        y_out.append([val_ys[(val_batch_pointer + i) % num_val_images]])
    val_batch_pointer += batch_size
    return x_out, y_out

######################################################################################################
with tf.device('/device:GPU:0'):

  def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)

  def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

  def conv2d(x, W, stride):
    return tf.nn.conv2d(x, W, strides=[1, stride, stride, 1], padding='VALID')

  x = tf.placeholder(tf.float32, shape=[None, 66, 200, 3])
  y_ = tf.placeholder(tf.float32, shape=[None, 1])

  x_image = x

  #first convolutional layer

  W_conv1 = weight_variable([5, 5, 3, 24])
  b_conv1 = bias_variable([24])

  h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1, 2) + b_conv1)

  #second convolutional layer

  W_conv2 = weight_variable([5, 5, 24, 36])
  b_conv2 = bias_variable([36])

  h_conv2 = tf.nn.relu(conv2d(h_conv1, W_conv2, 2) + b_conv2)

  #third convolutional layer
  W_conv3 = weight_variable([5, 5, 36, 48])
  b_conv3 = bias_variable([48])

  h_conv3 = tf.nn.relu(conv2d(h_conv2, W_conv3, 2) + b_conv3)

  #fourth convolutional layer
  W_conv4 = weight_variable([3, 3, 48, 64])
  b_conv4 = bias_variable([64])

  h_conv4 = tf.nn.relu(conv2d(h_conv3, W_conv4, 1) + b_conv4)

  #fifth convolutional layer
  W_conv5 = weight_variable([3, 3, 64, 64])
  b_conv5 = bias_variable([64])

  h_conv5 = tf.nn.relu(conv2d(h_conv4, W_conv5, 1) + b_conv5)

  #FCL 1
  W_fc1 = weight_variable([1152, 1164])
  b_fc1 = bias_variable([1164])

  h_conv5_flat = tf.reshape(h_conv5, [-1, 1152])
  h_fc1 = tf.nn.relu(tf.matmul(h_conv5_flat, W_fc1) + b_fc1)

  keep_prob = tf.placeholder(tf.float32)
  h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

  #FCL 2
  W_fc2 = weight_variable([1164, 100])
  b_fc2 = bias_variable([100])

  h_fc2 = tf.nn.relu(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)

  h_fc2_drop = tf.nn.dropout(h_fc2, keep_prob)

  #FCL 3
  W_fc3 = weight_variable([100, 50])
  b_fc3 = bias_variable([50])

  h_fc3 = tf.nn.relu(tf.matmul(h_fc2_drop, W_fc3) + b_fc3)

  h_fc3_drop = tf.nn.dropout(h_fc3, keep_prob)

  #FCL 3
  W_fc4 = weight_variable([50, 10])
  b_fc4 = bias_variable([10])

  h_fc4 = tf.nn.relu(tf.matmul(h_fc3_drop, W_fc4) + b_fc4)

  h_fc4_drop = tf.nn.dropout(h_fc4, keep_prob)

  #Output
  W_fc5 = weight_variable([10, 1])
  b_fc5 = bias_variable([1])

  #linear
  #y = tf.multiply((tf.matmul(h_fc4_drop, W_fc5) + b_fc5), 2)  
  ## atan
  y =  tf.multiply(tf.atan(tf.matmul(h_fc4_drop, W_fc5) + b_fc5), 2)#scale the atan output

#######################################################################################################3

LOGDIR = './save'


sess = tf.InteractiveSession()

L2NormConst = 0.001

train_vars = tf.trainable_variables()

loss = tf.reduce_mean(tf.square(tf.subtract(y_,y))) + tf.add_n([tf.nn.l2_loss(v) for v in train_vars]) * L2NormConst
train_step = tf.train.AdamOptimizer(1e-4).minimize(loss)
sess.run(tf.initialize_all_variables())

# create a summary to monitor cost tensor
tf.summary.scalar("loss", loss)
# merge all summaries into a single op
merged_summary_op =  tf.summary.merge_all()

saver = tf.train.Saver(write_version = saver_pb2.SaverDef.V1)

# op to write logs to Tensorboard
logs_path = './logs'
summary_writer = tf.summary.FileWriter(logs_path, graph=tf.get_default_graph())

epochs = 30
batch_size = 100

# train over the dataset about 30 times
for epoch in range(epochs):
  for i in range(int(num_images/batch_size)):
    xs, ys = LoadTrainBatch(batch_size)
    train_step.run(feed_dict={x: xs, y_: ys, keep_prob: 0.8})
    if i % 10 == 0:
      xs, ys = LoadValBatch(batch_size)
      loss_value = loss.eval(feed_dict={x:xs, y_: ys, keep_prob: 1.0})
      print("Epoch: %d, Step: %d, Loss: %g" % (epoch, epoch * batch_size + i, loss_value))

    # write logs at every iteration
    summary = merged_summary_op.eval(feed_dict={x:xs, y_: ys,keep_prob: 1.0})
    summary_writer.add_summary(summary, epoch * num_images/batch_size + i)

    if i % batch_size == 0:
      if not os.path.exists(LOGDIR):
        os.makedirs(LOGDIR)
      checkpoint_path = os.path.join(LOGDIR, "model.ckpt")
      filename = saver.save(sess, checkpoint_path)
  print("Model saved in file: %s" % filename)

print("Run the command line:\n" \
          "--> tensorboard --logdir=./logs " \
          "\nThen open http://0.0.0.0:6006/ into your web browser")
